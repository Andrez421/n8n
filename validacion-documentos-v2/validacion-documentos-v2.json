{
  "name": "validacion-documentos-v2",
  "nodes": [
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "triggerOn": "specificFolder",
        "folderToWatch": {
          "__rl": true,
          "value": "1s8k8d8mfbBlpNu_e2zPEY8P5123isQFV",
          "mode": "list",
          "cachedResultName": "Archivos de Matrícula",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1s8k8d8mfbBlpNu_e2zPEY8P5123isQFV"
        },
        "event": "folderCreated"
      },
      "id": "c21dd73e-cf10-4edc-99ea-cf042a5f0b0c",
      "name": "Google Drive Trigger",
      "type": "n8n-nodes-base.googleDriveTrigger",
      "typeVersion": 1,
      "position": [
        -1840,
        80
      ],
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "H3fqwTFhSg1quRSR",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "amount": 2,
        "unit": "minutes"
      },
      "id": "e40c70a8-8a2c-40ec-8e56-1bb32f641969",
      "name": "Wait 2min",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [
        -1680,
        80
      ],
      "webhookId": "6032a25c-6dc6-449a-83c2-6f3a00bff3f3",
      "disabled": true
    },
    {
      "parameters": {
        "functionCode": "const config = {\n  rootFolderId: '1s8k8d8mfbBlpNu_e2zPEY8P5123isQFV',\n  sheet: {\n    id: '1irpTXy8D2oysdMdzdaxf9Zk9SSEDtENSFxDAum6F1wM',\n    tab: 'Registro de Matrículas',\n    columns: {\n      nombres: 'Nombres',\n      apellidos: 'Apellidos',\n      correo: 'Correo',\n      estado: 'Estado',\n      obs: 'Observaciones',\n      acta: 'Enlace Acta',\n      identidad: 'Enlace Identidad',\n      salud: 'Enlace Salud',\n      estudio: 'Enlace Diploma',\n      foto: 'Enlace Foto',\n      icfes: 'Enlace ICFES',\n      registro: 'Enlace Registro Civil',\n      tratDatos: 'Enlace Trat. Datos'\n    }\n  },\n  gcs: {\n    bucket: 'validacion-documentos-sena',\n    outputPrefix: 'vision-output/sena',\n    location: 'us'\n  },\n  vision: {\n    languageHints: ['es'],\n    minWords: 30,\n    minChars: 150,\n    retry: { maxAttempts: 2, delayMs: 10000 }\n  },\n  email: {\n    cc: 'abravop73@gmail.com',\n    fromName: 'Matrículas SENA',\n    subjectError: 'SENA - Corrección de documentos de matrícula',\n    templateError: 'Estimado(a) NOMBRES APELLIDOS,\\n\\nTras revisar los documentos que cargó para el proceso de matrícula, encontramos incidencias que requieren corrección:\\n\\nLISTA_PROBLEMAS\\n\\nPor favor, vuelva a cargar los documentos correspondientes mediante el mismo formulario. Le recomendamos verificar que:\\n• El archivo sea el solicitado (tipo correcto).\\n• El contenido sea legible (sin borrosidad) y completo.\\n• El formato sea PDF (salvo la fotografía: JPG o PNG).\\n\\nAgradecemos realizar el reenvío a la mayor brevedad para no retrasar su matrícula.\\n\\nSaludos cordiales,\\nEquipo de Matrículas SENA'\n  },\n  requiredDocs: [\n    { key: 'ACTA_DE_COMPROMISO', sheetColumn: 'Enlace Acta', expected: {mime:['application/pdf']}, keywords: ['ACTA','COMPROMISO','APRENDIZ','FICHA','FIRMA'] },\n    { key: 'DOCUMENTO_DE_IDENTIDAD', sheetColumn: 'Enlace Identidad', expected: {mime:['application/pdf']}, keywords: ['CÉDULA','IDENTIDAD','REPÚBLICA DE COLOMBIA','IDENTIFICACIÓN','NÚMERO'] },\n    { key: 'CERTIFICADO_DE_SALUD', sheetColumn: 'Enlace Salud', expected: {mime:['application/pdf']}, keywords: ['ADRES','EPS','SALUD','AFILIADO','RÉGIMEN'] },\n    { key: 'CERTIFICADO_DE_ESTUDIO', sheetColumn: 'Enlace Diploma', expected: {mime:['application/pdf']}, keywords: ['DIPLOMA','BACHILLER','INSTITUCIÓN','ACTA DE GRADO','TÍTULO'] },\n    { key: 'PRUEBAS_ICFES', sheetColumn: 'Enlace ICFES', expected: {mime:['application/pdf']}, keywords: ['ICFES','SABER','RESULTADOS','PUNTAJE','CÓDIGO'] },\n    { key: 'FOTOGRAFIA', sheetColumn: 'Enlace Foto', expected: {mime:['image/jpeg','image/png']}, keywords: [], imageMin: {sizeBytes: 15000} },\n    { key: 'REGISTRO_CIVIL', sheetColumn: 'Enlace Registro Civil', expected: {mime:['application/pdf']}, keywords: ['REGISTRO CIVIL','NACIMIENTO','NOTARÍA','NÚMERO','FOLIO'] },\n    { key: 'TRATAMIENTO_DE_DATOS', sheetColumn: 'Enlace Trat. Datos', expected: {mime:['application/pdf']}, keywords: ['TRATAMIENTO DE DATOS','HÁBEAS DATA','LEY 1581','AUTORIZO','AUTORIZACIÓN'] }\n  ]\n};\n\nreturn [{ json: { config } }];"
      },
      "id": "b7bc1a01-bb97-43bf-a771-3051bfa66560",
      "name": "CONFIG",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1520,
        80
      ]
    },
    {
      "parameters": {
        "functionCode": "const full = $json.name || \"\";\nconst [apellidos, nombres] = full.split(\",\").map(s => (s || \"\").trim());\nreturn [{ json: { folderId: $json.id, folderName: full, apellidos, nombres } }];"
      },
      "id": "69e6852d-f2c0-465b-bf94-bf341fdbded9",
      "name": "Parse Apellidos, Nombres",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1360,
        80
      ]
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1irpTXy8D2oysdMdzdaxf9Zk9SSEDtENSFxDAum6F1wM",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Registro de Matrículas",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1irpTXy8D2oysdMdzdaxf9Zk9SSEDtENSFxDAum6F1wM/edit#gid=0"
        },
        "options": {}
      },
      "id": "a6e22554-5aaf-4222-ac91-f4d81e22a92d",
      "name": "Sheets - Lookup Estudiante",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [
        -1200,
        80
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "XWBm2gEuEegQv4xE",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Obtener apellidos del contexto del flujo\nlet apellidos = '';\n\n// Intentar obtener de diferentes fuentes posibles\ntry {\n  apellidos = $workflow.context?.apellidos || '';\n} catch (e) {\n  try {\n    apellidos = $execution.context?.apellidos || '';\n  } catch (e2) {\n    const allItems = $items();\n    if (allItems && allItems.length > 0) {\n      for (let item of allItems) {\n        if (item.json && item.json.apellidos) {\n          apellidos = item.json.apellidos;\n          break;\n        }\n      }\n    }\n  }\n}\nif (!apellidos) {\n  apellidos = 'Bravo Palacios'; // Temporal para debugging\n}\nconst allRows = $items().map(item => item.json);\nconst matchingRow = allRows.find(row => {\n  if (!row.Apellidos) return false;\n  const rowApellidos = row.Apellidos.trim().toLowerCase();\n  const searchApellidos = apellidos.trim().toLowerCase();\n  if (rowApellidos === searchApellidos) return true;\n  if (rowApellidos.includes(searchApellidos) || searchApellidos.includes(rowApellidos)) return true;\n  return false;\n});\nif (!matchingRow) {\n  throw new Error(`No se encontró estudiante con apellidos: \"${apellidos}\"`);\n}\nreturn [{ json: matchingRow }];"
      },
      "id": "1233073d-7799-4bce-9c3c-035820b5e1c6",
      "name": "Filter - Buscar Estudiante",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1024,
        80
      ]
    },
    {
      "parameters": {
        "functionCode": "const row = $items()[0].json;\nconst cfg = $('CONFIG').first().json.config;\nreturn cfg.requiredDocs.map(d => ({\n  docKey: d.key,\n  sheetColumn: d.sheetColumn,\n  expected: d.expected,\n  keywords: d.keywords || [],\n  imageMin: d.imageMin || null,\n  link: row[d.sheetColumn] || \"\",\n  nombres: row[cfg.sheet.columns.nombres] || \"\",\n  apellidos: row[cfg.sheet.columns.apellidos] || \"\",\n  correo: row[cfg.sheet.columns.correo] || \"\",\n  folderId: $('Parse Apellidos, Nombres').first().json.folderId\n})).map(json => ({ json }));"
      },
      "id": "d95271b6-efaa-4bf0-9306-98ba4158db9e",
      "name": "Preparar Items por Documento",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -848,
        80
      ]
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "id": "38dd9c25-d1bd-40eb-ba1d-8d5b948245d3",
      "name": "Split in Batches NUEVO",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -656,
        144
      ]
    },
    {
      "parameters": {
        "functionCode": "function extractFileId(u){\n  if(!u) return \"\";\n  const m1 = u.match(/\\/d\\/([a-zA-Z0-9_-]+)/);\n  if (m1) return m1[1];\n  const m2 = u.match(/[?&]id=([a-zA-Z0-9_-]+)/);\n  if (m2) return m2[1];\n  if (/^[a-zA-Z0-9_-]{20,}$/.test(u)) return u; // ya es un ID\n  return \"\";\n}\nreturn [{ json: { ...$json, fileId: extractFileId($json.link), missing: !$json.link } }];"
      },
      "id": "8c19bdf8-1515-4115-bca8-65ae23a86001",
      "name": "Parse Link - Extraer FileId",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -464,
        320
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "leftValue": "={{ $json.missing }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              },
              "id": "059739ce-9c0a-4fd1-baf8-3b625eb40370"
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "7ce619bb-6f5d-46af-b701-0b7934bf6f09",
      "name": "IF - Archivo Faltante",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -272,
        320
      ]
    },
    {
      "parameters": {
        "functionCode": "return [{ json: { docKey: $json.docKey, missing: true } }];"
      },
      "id": "c7603c4a-a300-40e3-a046-e369fec57aa1",
      "name": "Acumular - Faltante",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -96,
        224
      ]
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "filter": {},
        "options": {}
      },
      "id": "27fb2cb4-7d58-4a95-9e6e-345e70f21e9e",
      "name": "Drive - Get Meta",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -96,
        432
      ],
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "H3fqwTFhSg1quRSR",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "const parseItems = $('Parse Link - Extraer FileId').all();\nif (!parseItems || parseItems.length === 0) {\n  throw new Error('No se encontraron datos del nodo Parse Link');\n}\nconst targetFileId = parseItems[parseItems.length - 1].json.fileId;\nconst allFiles = $items();\nconst matchingFile = allFiles.find(item => item.json.id === targetFileId);\nif (!matchingFile) {\n  throw new Error(`No se encontro el archivo con ID: ${targetFileId}`);\n}\nconst originalData = parseItems[parseItems.length - 1].json;\nconst fileData = matchingFile.json;\nreturn [{ json: { ...originalData, ...fileData } }];\n"
      },
      "id": "befa5149-3f4a-4aa5-8a9c-fe6d1578c056",
      "name": "Filter - Archivo Correcto",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        80,
        432
      ]
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": "={{ $json.id }}",
        "options": {
          "googleFileConversion": {}
        }
      },
      "id": "e883e9f8-e169-4310-aa9b-1ccd1dee28ee",
      "name": "Drive - Download",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        256,
        432
      ],
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "H3fqwTFhSg1quRSR",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "leftValue": "={{ $json.mimeType }}",
              "rightValue": "application/pdf",
              "operator": {
                "type": "string",
                "operation": "equal"
              },
              "id": "condition1"
            },
            {
              "leftValue": "={{ $json.name }}",
              "rightValue": ".pdf",
              "operator": {
                "type": "string",
                "operation": "endsWith"
              },
              "id": "condition2"
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "9ed1ab80-703a-4b23-a30b-518dbac00036",
      "name": "IF - Es PDF",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        400,
        432
      ]
    },
    {
      "parameters": {
        "functionCode": "const b64 = $binary?.data?.data || '';\nif (!b64) throw new Error('No se encontró binario base64 del PDF');\nreturn [{ json: {\n  request: {\n    rawDocument: { content: b64, mimeType: 'application/pdf' }\n  },\n  docKey: $json.docKey,\n  keywords: $json.keywords || [],\n  nombres: $json.nombres || '',\n  apellidos: $json.apellidos || '',\n  correo: $json.correo || '',\n  imageMin: $json.imageMin || null\n} }];"
      },
      "id": "0876bb4e-dd8a-48bc-b016-b406f003b231",
      "name": "Build DocAI Request",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        608,
        400
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://us-documentai.googleapis.com/v1/projects/478244911399/locations/us/processors/f7439ed85d11a95b:process",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "raw",
        "body": "={{ JSON.stringify($json.request) }}",
        "options": {
          "timeout": 30000
        }
      },
      "id": "62f535f8-1dc5-4570-bcef-90e991d1ae2c",
      "name": "Document AI - Process PDF",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        800,
        400
      ],
      "credentials": {
        "googleApi": {
          "id": "r8FPwFTXOQBJ196I",
          "name": "Google Service Account account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "const cfg = $('CONFIG').first().json.config;\nconst ctx = $('Build DocAI Request').first().json || {};\nconst docKey = ctx.docKey;\nconst keywords = ctx.keywords || [];\nconst nombres = (ctx.nombres || '').toString();\nconst apellidos = (ctx.apellidos || '').toString();\nlet txt = '';\nif ($json.document && typeof $json.document.text === 'string') {\n  txt = $json.document.text;\n}\ntxt = (txt || '').replace(/\\s+/g, ' ').trim();\nconst words = txt ? txt.split(' ').length : 0;\nconst chars = txt.length;\nlet okLegible = (words >= cfg.vision.minWords) && (chars >= cfg.vision.minChars);\nlet okKeywords = true;\nif (keywords.length && txt) {\n  okKeywords = keywords.some(k => txt.toUpperCase().includes(k.toUpperCase()));\n}\n// Validación de nombre para Cédula, EPS/ADRES e ICFES\nconst requireNameFor = ['DOCUMENTO_DE_IDENTIDAD','CERTIFICADO_DE_SALUD','PRUEBAS_ICFES'];\nconst nombreTokens = (nombres + ' ' + apellidos).trim().split(/\\s+/).filter(Boolean);\nconst hasAnyName = nombreTokens.some(n => txt.toUpperCase().includes(n.toUpperCase()));\nlet okNombre = true;\nif (requireNameFor.includes(docKey)) okNombre = hasAnyName;\n// Heurística de firma para Acta/Tratamiento de Datos\nlet okFirma = true;\nif (['ACTA_DE_COMPROMISO','TRATAMIENTO_DE_DATOS'].includes(docKey)) {\n  const T = txt.toUpperCase();\n  const idx = T.indexOf('FIRMA');\n  const firmaLabel = (idx >= 0);\n  let nameNear = false;\n  if (firmaLabel) {\n    const windowText = T.slice(Math.max(0, idx - 120), Math.min(T.length, idx + 200));\n    nameNear = nombreTokens.some(n => windowText.includes(n.toUpperCase()));\n  }\n  let alphaNear = false;\n  if (idx >= 0) {\n    const after = T.slice(idx, Math.min(T.length, idx + 160));\n    alphaNear = /FIRMA[^A-ZÁÉÍÓÚÑ]*[A-ZÁÉÍÓÚÑ]{3,}/.test(after);\n  }\n  okFirma = firmaLabel && (nameNear || alphaNear);\n}\nconst issues = [];\nif (!okLegible) issues.push('Ilegible (pocas palabras/caracteres)');\nif (!okKeywords) issues.push('Contenido no corresponde (no se hallaron palabras clave)');\nif (okNombre === false) issues.push('No se encontró el nombre del estudiante en el documento');\nif (okFirma === false) issues.push('No se detectó firma en el área correspondiente');\nreturn [{ json: { docKey, okLegible, okKeywords, okNombre, okFirma, words, chars, issues, ocrText: txt } }];"
      },
      "id": "2d20e93f-3068-4ec5-a873-dc3b6a8f46a2",
      "name": "DocAI - Parse OCR Results",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1008,
        400
      ]
    },
    {
      "parameters": {
        "operation": "resize",
        "width": 1024,
        "height": 1024,
        "resizeOption": "ignoreAspectRatio",
        "options": {}
      },
      "id": "f472d523-e9fb-49d4-8cb8-1cc30ee6cc4d",
      "name": "Resize For AI (1024x1024)",
      "type": "n8n-nodes-base.editImage",
      "typeVersion": 1,
      "position": [
        608,
        576
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "Evalúa si la imagen es válida como foto para carnet estudiantil.",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "Eres un asistente que valida si una imagen sirve como foto para un carnet estudiantil.\\n\\nCRITERIOS MÍNIMOS (APLICA TODOS):\\n1) Debe aparecer exactamente UNA persona humana. Rechaza si no hay personas o si hay más de una.\\n2) Fondo BLANCO y liso (blanco puro o casi blanco; tolera variaciones leves por iluminación). No debe haber objetos, estampados ni texto.\\n3) Rostro de frente, ojos abiertos y visibles, sin obstrucciones notables (sin gafas de sol, mascarilla, manos u objetos tapando la cara).\\n4) En color, nítida (en foco), sin filtros fuertes, sin desenfoques o ruido extremo.\\n5) Encuadre tipo retrato: cabeza y hombros visibles (no solo la frente o solo la cara parcial).\\n6) Iluminación uniforme; sombras duras en la cara o fondo no son aceptables.\\n\\nSalida estructurada: devuelve un objeto con las claves `is_valid` (boolean), `photo_description` (string) y `reasons` (array de strings), explicando por qué no cumple en caso de fallo. No inventes datos que no estén en la imagen."
            },
            {
              "type": "HumanMessagePromptTemplate",
              "messageType": "imageBinary"
            }
          ]
        }
      },
      "id": "5982d760-9765-4850-ba40-775975c120f2",
      "name": "Student ID Photo Validator",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "position": [
        800,
        576
      ],
      "typeVersion": 1.4
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"is_valid\": { \n      \"type\": \"boolean\",\n      \"description\": \"Indica si la imagen es válida para carnet estudiantil\"\n    },\n    \"photo_description\": { \n      \"type\": \"string\", \n      \"description\": \"Describe a la persona, objetos y el fondo de la imagen\"\n    },\n    \"reasons\": { \n      \"type\": \"array\", \n      \"items\": { \"type\": \"string\" },\n      \"description\": \"Lista de razones por las que la imagen no es válida (si aplica)\"\n    }\n  },\n  \"required\": [\"is_valid\", \"photo_description\", \"reasons\"]\n}"
      },
      "id": "c5027d5c-22c8-4650-b44f-55cfd2fbc05c",
      "name": "Structured Output Parser",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "position": [
        976,
        736
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "modelName": "models/gemini-1.5-pro-latest",
        "options": {}
      },
      "id": "47cf4255-379b-4148-bf10-8bcb83608cac",
      "name": "Google Gemini Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "position": [
        800,
        736
      ],
      "typeVersion": 1,
      "credentials": {
        "googlePalmApi": {
          "id": "kszLlTPJITHvdOAR",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "const docKey = 'FOTOGRAFIA';\nconst size = Number($('Drive - Get Meta').first().json.size || 0);\nconst cfg = $('CONFIG').first().json.config;\nconst minBytes = ($items(0,1)[0].json.imageMin?.sizeBytes) || (cfg.requiredDocs.find(d=>d.key==='FOTOGRAFIA')?.imageMin?.sizeBytes) || 15000;\nconst out = $json.output || $json;\nconst result = out.output || out;\nconst isValidAI = !!(result && result.is_valid === true);\nconst okSize = size >= minBytes;\nconst okLegible = isValidAI && okSize;\nconst issues = [];\nif (!okSize) issues.push(`Imagen demasiado pequeña (< ${minBytes} bytes)`);\nif (!isValidAI) {\n  const reasons = Array.isArray(result?.reasons) ? result.reasons.join('; ') : 'No cumple criterios de rostro/fondo blanco';\n  issues.push(reasons);\n}\nreturn [{ json: { docKey, okLegible, okKeywords: true, words: 0, chars: 0, issues, photoAI: result, size, minBytes } }];"
      },
      "id": "9fa2e5f6-5919-4ea9-9cc4-239e4fbc1ba4",
      "name": "Parse Photo Validation",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1136,
        576
      ]
    },
    {
      "parameters": {
        "functionCode": "// Agregar resultado del OCR o faltante al contexto\nreturn [{ json: $json }];"
      },
      "id": "6599e344-eb60-4f32-9b34-7f7f04f0fd97",
      "name": "Acumular - Resultado",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1328,
        448
      ]
    },
    {
      "parameters": {
        "functionCode": "// Consolidado final (incluye okNombre/okFirma)\nconst all = $items().map(i => i.json).filter(j => j.docKey || j.missing);\nconst missing = all.filter(j => j.missing).map(j => j.docKey);\nconst bad = all.filter(j => (j.okLegible === false || j.okKeywords === false || j.okNombre === false || j.okFirma === false));\nconst problemas = [];\nif (missing.length) problemas.push('Faltantes: ' + missing.join(', '));\nif (bad.length) problemas.push('Con incidencias: ' + bad.map(b => `${b.docKey} [${(b.issues||[]).join('; ')}]`).join(', '));\nconst completo = (missing.length === 0 && bad.length === 0);\nconst estado = completo ? 'Completo' : 'Pendiente corrección';\nconst observaciones = completo ? 'Documentos verificados' : problemas.join('\\n');\nlet nombres = '';\nlet apellidos = '';\nlet correo = '';\ntry {\n  const preparadoItems = $('Preparar Items por Documento').first().json;\n  nombres = preparadoItems.nombres || '';\n  apellidos = preparadoItems.apellidos || '';\n  correo = preparadoItems.correo || '';\n} catch (e) {}\nreturn [{ json: { completo, estado, observaciones, problemasTexto: problemas.join('\\n'), nombres, apellidos, correo } }];"
      },
      "id": "7843430f-d662-4e85-8654-555e3354cb21",
      "name": "Resumen Final",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -464,
        32
      ]
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1irpTXy8D2oysdMdzdaxf9Zk9SSEDtENSFxDAum6F1wM",
          "mode": "list",
          "cachedResultName": "Registro de Matrículas",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1irpTXy8D2oysdMdzdaxf9Zk9SSEDtENSFxDAum6F1wM/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Registro de Matrículas",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1irpTXy8D2oysdMdzdaxf9Zk9SSEDtENSFxDAum6F1wM/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Estado ": "={{ $json.estado }}",
            "Observaciones": "={{ $json.observaciones }}"
          },
          "matchingColumns": [
            "Estado "
          ]
        },
        "options": {}
      },
      "id": "b5ece1f9-cff6-4e50-9e1c-406214195ff1",
      "name": "Sheets - Update Estado",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [
        -272,
        32
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "XWBm2gEuEegQv4xE",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.completo }}",
              "rightValue": false,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ]
        },
        "options": {}
      },
      "id": "54d8b14d-f24a-4495-9717-63565de594f0",
      "name": "IF - Enviar Correo",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -96,
        32
      ]
    },
    {
      "parameters": {
        "sendTo": "={{ $json.correo }}",
        "subject": "SENA - Corrección de documentos de matrícula",
        "emailType": "text",
        "message": "={{ $('CONFIG').first().json.config.email.templateError.replace('NOMBRES', $json.nombres).replace('APELLIDOS', $json.apellidos).replace('LISTA_PROBLEMAS', $json.problemasTexto) }}",
        "options": {
          "ccList": "abravop73@gmail.com"
        }
      },
      "id": "8a1c8a61-d93e-462a-86ad-50e3b7b7bdff",
      "name": "Gmail - Enviar Notificación",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2,
      "position": [
        112,
        16
      ],
      "webhookId": "ec42b669-2026-4c1f-9310-ef35e0f2994e",
      "credentials": {
        "gmailOAuth2": {
          "id": "CniNokNQx65Ut0pO",
          "name": "Gmail account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Google Drive Trigger": {
      "main": [
        [
          {
            "node": "Wait 2min",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait 2min": {
      "main": [
        [
          {
            "node": "CONFIG",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CONFIG": {
      "main": [
        [
          {
            "node": "Parse Apellidos, Nombres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Apellidos, Nombres": {
      "main": [
        [
          {
            "node": "Sheets - Lookup Estudiante",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sheets - Lookup Estudiante": {
      "main": [
        [
          {
            "node": "Filter - Buscar Estudiante",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter - Buscar Estudiante": {
      "main": [
        [
          {
            "node": "Preparar Items por Documento",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Preparar Items por Documento": {
      "main": [
        [
          {
            "node": "Split in Batches NUEVO",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split in Batches NUEVO": {
      "main": [
        [
          {
            "node": "Resumen Final",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Parse Link - Extraer FileId",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Link - Extraer FileId": {
      "main": [
        [
          {
            "node": "IF - Archivo Faltante",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF - Archivo Faltante": {
      "main": [
        [
          {
            "node": "Acumular - Faltante",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Drive - Get Meta",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Drive - Get Meta": {
      "main": [
        [
          {
            "node": "Filter - Archivo Correcto",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter - Archivo Correcto": {
      "main": [
        [
          {
            "node": "Drive - Download",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Drive - Download": {
      "main": [
        [
          {
            "node": "IF - Es PDF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF - Es PDF": {
      "main": [
        [
          {
            "node": "Build DocAI Request",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Resize For AI (1024x1024)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build DocAI Request": {
      "main": [
        [
          {
            "node": "Document AI - Process PDF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Document AI - Process PDF": {
      "main": [
        [
          {
            "node": "DocAI - Parse OCR Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DocAI - Parse OCR Results": {
      "main": [
        [
          {
            "node": "Acumular - Resultado",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Resize For AI (1024x1024)": {
      "main": [
        [
          {
            "node": "Student ID Photo Validator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Student ID Photo Validator": {
      "main": [
        [
          {
            "node": "Parse Photo Validation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Photo Validation": {
      "main": [
        [
          {
            "node": "Acumular - Resultado",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Acumular - Resultado": {
      "main": [
        [
          {
            "node": "Split in Batches NUEVO",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Resumen Final": {
      "main": [
        [
          {
            "node": "Sheets - Update Estado",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sheets - Update Estado": {
      "main": [
        [
          {
            "node": "IF - Enviar Correo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF - Enviar Correo": {
      "main": [
        [
          {
            "node": "Gmail - Enviar Notificación",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Student ID Photo Validator",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Student ID Photo Validator",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "9089e1ff-a54d-49a1-9390-9a6092185a95",
  "meta": {
    "instanceId": "7d3ce94020e6d84a807d04d473a5273af865030a272b3c70d8186c25ba87c33f"
  },
  "id": "xT68KAPiNegUaAws",
  "tags": []
}